# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import grading_pb2 as grading__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grading_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class GradingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddGrade = channel.unary_unary(
                '/GradingService/AddGrade',
                request_serializer=grading__pb2.Grade.SerializeToString,
                response_deserializer=grading__pb2.Grade.FromString,
                _registered_method=True)
        self.GetGrade = channel.unary_unary(
                '/GradingService/GetGrade',
                request_serializer=grading__pb2.GradeId.SerializeToString,
                response_deserializer=grading__pb2.Grade.FromString,
                _registered_method=True)
        self.DeleteGrade = channel.unary_unary(
                '/GradingService/DeleteGrade',
                request_serializer=grading__pb2.GradeId.SerializeToString,
                response_deserializer=grading__pb2.Empty.FromString,
                _registered_method=True)
        self.GetAllGrades = channel.unary_unary(
                '/GradingService/GetAllGrades',
                request_serializer=grading__pb2.Empty.SerializeToString,
                response_deserializer=grading__pb2.GradeList.FromString,
                _registered_method=True)
        self.UpdateGrade = channel.unary_unary(
                '/GradingService/UpdateGrade',
                request_serializer=grading__pb2.Grade.SerializeToString,
                response_deserializer=grading__pb2.Grade.FromString,
                _registered_method=True)


class GradingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddGrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllGrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddGrade': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGrade,
                    request_deserializer=grading__pb2.Grade.FromString,
                    response_serializer=grading__pb2.Grade.SerializeToString,
            ),
            'GetGrade': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGrade,
                    request_deserializer=grading__pb2.GradeId.FromString,
                    response_serializer=grading__pb2.Grade.SerializeToString,
            ),
            'DeleteGrade': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGrade,
                    request_deserializer=grading__pb2.GradeId.FromString,
                    response_serializer=grading__pb2.Empty.SerializeToString,
            ),
            'GetAllGrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllGrades,
                    request_deserializer=grading__pb2.Empty.FromString,
                    response_serializer=grading__pb2.GradeList.SerializeToString,
            ),
            'UpdateGrade': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGrade,
                    request_deserializer=grading__pb2.Grade.FromString,
                    response_serializer=grading__pb2.Grade.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GradingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddGrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GradingService/AddGrade',
            grading__pb2.Grade.SerializeToString,
            grading__pb2.Grade.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GradingService/GetGrade',
            grading__pb2.GradeId.SerializeToString,
            grading__pb2.Grade.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteGrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GradingService/DeleteGrade',
            grading__pb2.GradeId.SerializeToString,
            grading__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllGrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GradingService/GetAllGrades',
            grading__pb2.Empty.SerializeToString,
            grading__pb2.GradeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateGrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/GradingService/UpdateGrade',
            grading__pb2.Grade.SerializeToString,
            grading__pb2.Grade.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
